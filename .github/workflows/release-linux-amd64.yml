name: Linux-release

on:
  push:
    branches: [ "master" ]
    tags:
      - '*'

jobs:
  build:

    runs-on: ubuntu-20.04
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     platform: 
    #       - linux/amd64
    #       - linux/arm64

    steps:
    - uses: actions/checkout@v1

    - name: 下载submodule源码
      run: mv -f .gitmodules_github .gitmodules && git submodule sync && git submodule update --init

    - name: apt-get安装依赖库(非必选)
      run: sudo apt-get update && sudo apt-get install -y cmake libssl-dev libsdl-dev libavcodec-dev libavutil-dev libswscale-dev libresample-dev libusrsctp-dev

    - name: 下载 SRTP
      uses: actions/checkout@v2
      with:
        repository: cisco/libsrtp
        fetch-depth: 1
        ref: v2.3.0
        path: 3rdpart/libsrtp

    - name: 编译 SRTP
      run: cd 3rdpart/libsrtp && ./configure --enable-openssl && make -j4 && sudo make install

    - name: 编译
      run: mkdir -p linux_build && cd linux_build && cmake .. -DENABLE_WEBRTC=true -DENABLE_FFMPEG=true && make -j $(nproc)

    - name: LS
      run: ls release/linux/Debug

    - name: Create ZIP Dir
      run: mkdir ZLMediaKit-linux

    - name: Copy Need Files
      run: |
          cp "release/linux/Debug/MediaServer" "ZLMediaKit-linux/"
          cp "release/linux/Debug/libmk_api.so" "ZLMediaKit-linux/"
          cp "release/linux/Debug/default.pem" "ZLMediaKit-linux/"
          cp "release/linux/Debug/config.ini" "ZLMediaKit-linux/"
          cp -r "release/linux/Debug/www/" "ZLMediaKit-linux/"
      
    - name: Package Files
      if: startsWith(github.ref, 'refs/tags/')
      run: tar -cvf ZLMediaKit-linux.tar ZLMediaKit-linux/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: ZLMediaKit-linux
        path: ZLMediaKit-linux.tar

    - name: Release artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ZLMediaKit-linux.tar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
